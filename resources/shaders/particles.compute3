#version 430 core

//Energy renormalisation

uniform int N;
uniform float dE;
uniform float v2;

layout(binding = 0) buffer velBuffer{
	vec4 velocities[];
};
layout(binding = 1) buffer massBuffer{
	float masses[];
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main(){
	const uint gid = gl_GlobalInvocationID.x;
	
	if(gid < N){
		//float v2i = dot(velocities[gid].xyz, velocities[gid].xyz);
		//velocities[gid] *= sqrt(max(0, dot(velocities[gid].xyz, velocities[gid].xyz) - 2 * dE / masses[gid]) / dot(velocities[gid].xyz, velocities[gid].xyz));
		velocities[gid] *= sqrt(max(0, 1 - 2 * dE /(v2 * masses[gid])));
	}
}