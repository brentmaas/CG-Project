#version 430 core

uniform int N;
uniform float mg;
uniform float dt;

layout(binding = 0) buffer posBuffer{
	vec4 x[];
};
layout(binding = 1) buffer posTargetBuffer{
	vec4 xt[];
};
layout(binding = 2) buffer velBuffer{
	vec4 v[];
};
layout(binding = 3) buffer velTargetBuffer{
	vec4 vt[];
};

//Compute shader for simple Newtonian gravity around (0, 0, 0)

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main(){
	const uint gid = gl_GlobalInvocationID.x;
	if(gid < N){
		vec4 xP = x[gid];
		vec4 vP = v[gid];
		float d = length(xP);
		vec4 a = -mg / (d * d * d) * xP;
		if(length(a) * 0.1f < length(vP + a * dt)){
			xt[gid] = xP + vP * dt + a * dt * dt / 2;
			vt[gid] = vP + a * dt;
		}else{
			xt[gid] = d * normalize(xP + vP * dt);
			vt[gid] = length(vP) * normalize(xt[gid] - xP);
		}
	}
}