#version 430 core

uniform int N;
uniform float g;
uniform float dt;

layout(std430, binding = 0) buffer posBuffer{
	vec4 x[];
};
layout(std430, binding = 1) buffer posTargetBuffer{
	vec4 xt[];
};
layout(std430, binding = 2) buffer velBuffer{
	vec4 v[];
};
layout(std430, binding = 3) buffer velTargetBuffer{
	vec4 vt[];
};
layout(std430, binding = 4) buffer massBuffer{
	float m[];
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main(){
	uint gid = gl_GlobalInvocationID.x;
	if(gid < N){
		vec4 dx = vec4(0, 0, 0, 0);
		vec4 dv = vec4(0, 0, 0, 0);
		
		int collision = 0;
		
		for(int i = 0;i < N;i++) if(i != gid){
			vec4 r = x[gid] - x[i];
			float d = length(r);
			vec4 ag = -g * m[i] * r / (d * d * d);
			if(length(ag) > 10){
				collision = 1;
			}else{
				dx += ag * dt * dt / 2;
				dv += ag * dt;
			}
		}
		if(collision == 0){
			xt[gid] = x[gid] + v[gid] * dt + dx;
			vt[gid] = v[gid] + dv;
		}
	}
}