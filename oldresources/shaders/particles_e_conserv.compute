#version 430 core

uniform int N;
uniform float g;
uniform float dt;

layout(std430, binding = 0) buffer posBuffer{
	vec4 x[];
};
layout(std430, binding = 1) buffer targetPosBuffer{
	vec4 tx[];
};
layout(std430, binding = 2) buffer velBuffer{
	vec4 v[];
};
layout(std430, binding = 3) buffer targetVelBuffer{
	vec4 tv[];
};
layout(std430, binding = 4) buffer massBuffer{
	float m[];
};

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main(){
	const uint gid = gl_GlobalInvocationID.x;
	if(gid < N){
		vec4 dx = vec4(0, 0, 0, 0);
		vec4 dv = vec4(0, 0, 0, 0);
		
		for(int i = 0;i < N;i++) if(gid != i){
			vec4 dxab = x[gid] - x[i];
			float d = length(dxab);
			dx -= g * m[i] / (d * d * d) * dxab * dt * dt / 2;
			vec4 x2 = x[gid] + v[gid] * dt - g * m[i] / (d * d * d) * dxab * dt * dt / 2;
			vec4 xi2 = x[i] + v[i] * dt + g * m[gid] / (d * d * d) * dxab * dt * dt / 2;
			vec4 dxab2 = x2 - xi2;
			float d2 = length(dxab2);
			float dphi = 2 * g * m[gid] * m[i] * (1 / d - 1 / d2);
			float dvval = sign(dphi) * sqrt(sign(dphi) * dphi / m[gid]);
			vec4 dvdir = normalize(dvval * (x2 - x[gid]));
			dv += dvval * dvdir;
		}
		tx[gid] = x[gid] + v[gid] * dt + dx;
		tv[gid] = v[gid] + dv;
	}
}